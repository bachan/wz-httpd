CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
PROJECT (wz)

SET (WZ_VERSION 0.1.28)
SET (WZ_RPM_RELEASE 28)

SET (FIND_LIBRARY_USE_LIB64_PATHS TRUE)
SET (CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
SET (CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_STATIC_LIBRARY_PREFIX})

FIND_PATH    (EXPAT_INCLUDE expat.h)
FIND_LIBRARY (EXPAT_LIBRARY expat)

SET (CMAKE_WZ_HTTPD_VERSION "${WZ_VERSION}")
SET (CMAKE_WZ_HTTPD_CFG_DIR "${CMAKE_INSTALL_PREFIX}/etc")
SET (CMAKE_WZ_HTTPD_LOG_DIR "${CMAKE_INSTALL_PREFIX}/var/log")

CONFIGURE_FILE (include/config.h.in ${CMAKE_BINARY_DIR}/auto/config.h)
CONFIGURE_FILE (etc/wz.xml.in ${CMAKE_BINARY_DIR}/wz.xml)

INCLUDE_DIRECTORIES (include)
INCLUDE_DIRECTORIES (${CMAKE_BINARY_DIR})
INCLUDE_DIRECTORIES (${IEXPAT})

IF (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET (DEF_WZ -DMODEL_LINUX_EPOLL)
    SET (LIB_WZ ${EXPAT_LIBRARY} dl)
ELSE (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET (DEF_WZ -DMODEL_FREEBSD_KQUEUE)
    SET (LIB_WZ ${EXPAT_LIBRARY})
ENDIF (CMAKE_SYSTEM_NAME STREQUAL "Linux")

ADD_DEFINITIONS (-D__STDC_FORMAT_MACROS)
ADD_DEFINITIONS (${DEF_WZ})

AUX_SOURCE_DIRECTORY (src/wz SRC_WZ)
AUX_SOURCE_DIRECTORY (src/status SRC_STATUS)

ADD_EXECUTABLE (wz-httpd ${SRC_WZ})
TARGET_LINK_LIBRARIES (wz-httpd ${LIB_WZ})
ADD_LIBRARY (wz_status SHARED ${SRC_STATUS})

INSTALL (TARGETS wz-httpd DESTINATION bin)
INSTALL (FILES include/wz/plugin.hpp DESTINATION include/wz)
INSTALL (FILES ${CMAKE_BINARY_DIR}/wz.xml DESTINATION share/wz)

